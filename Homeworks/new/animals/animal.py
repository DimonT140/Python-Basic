class Animal:
    def __init__(self, name: str, preferred_food: set, age: int, treat_hours: int,
                 sleeping_hours: int, month: int) -> None:
        """
        :param name: str - имя животного.
        :param preferred_food: set - множество, содержащее предпочитаемые виды еды животного.
        :param age: int - возраст животного.
        :param treat_hours: int - количество часов, которые животное проводит в игре и развлечениях.
        :param sleeping_hours: int - количество часов, которые животное проводит во сне.
        :param month: int - количество месяцев с последнего визита к ветеринару.
        """
        # конструктор класса, принимает несколько параметров и инициализирует поля объекта
        self.name = name
        self.preferred_food = preferred_food
        self.age = age
        self.treat_hours = treat_hours
        self.sleeping_hours = sleeping_hours
        self.say_word = "???"  # поле, содержащее звук, который издает животное
        self.animal_type = "Животное"  # поле, содержащее тип животного
        self.hungry = True  # поле, содержащее информацию о том, голодное животное или нет
        self.month = month  # поле, содержащее информацию о последнем визите животного к ветеринару

    def __str__(self) -> str:
        """
        Метод, возвращающий строковое представление объекта.
        :return: строка, содержащая информацию о животном.
        """
        # содержит тип животного, его имя и возраст.
        return f"{self.animal_type} по имени {self.name}, {self.age} лет."

    def eat(self, food: str) -> None:
        """
        Метод, который позволяет животному кушать.
        :param food: str - еда, которую животное попытается съесть.
        """
        # проверяем, принадлежит ли еда к предпочитаемой пище животного
        if food in self.preferred_food:
            print(f"{self.name} кушает {food}")   # если да, то выводим сообщение, что животное ест еду
            self.hungry = False   # и меняем флаг голода на False, так как животное сыто
        else:
            print(f"{self.name} не ест: {food}")   # если нет, то выводим сообщение, что животное не ест такую еду

    def say(self) -> None:
        """
        Метод, который выводит на экран слово, которое произносит животное.
        :return: слово.
        """
        print(f"{self.name} говорит: {self.say_word}")

    def treat(self, hours: int = 1) -> None:
        """
        Метод, который запускает заботу о животном.
        :param hours: Количество часов, которые будет играть животное. По умолчанию 1.
        :return: информация о заботе.
        """
        if self.treat_hours == 0:
            # Если о животном не заботились, выводим сообщение об этом
            print(f'О {self.name} не заботитесь')
        else:
            # Выводим сообщение о том, что о животном заботились и сколько часов
            print(f'О {self.name} заботились {self.treat_hours} час(а)(ов)!')

    def sleeping(self, hours: int = 1) -> None:
        """
        Метод, описывает процесс сна животного.
        :param hours: Количество часов сна. По умолчанию 1.
        :return: Информация о сне.
        """
        # Если животное не спит, то выводим сообщение об этом.
        if self.sleeping_hours == 0:
            print(f'{self.name} не спит')
        else:
            # Иначе выводим сообщение о количестве часов сна.
            print(f'{self.name} спит {self.sleeping_hours} час(а)(ов)!')

    def last_vet_visit(self, months: int = 1):
        """
        Метод выводит информацию о последнем посещении ветеринара и сообщает, через сколько месяцев нужно
        повторно обратиться к ветеринару. Периодичность 6 месяцев.
        :param months: Количество месяцев, прошедших с последнего посещения ветеринара. По умолчанию 1.
        :return: Информация о посещении ветеринара.
        """
        # Выводим информацию о последнем посещении ветеринара и о том, через сколько месяцев нужно повторно обратиться
        print(f"Последнее посещение ветеринара было {months} мес. назад, следующее через {6 - months}.")
        # Если прошло 6 месяцев, то выводим сообщение о том, что пора идти к ветеринару
        if months == 6:
            print(f'{self.name} идет к ветеринару...')
        # Если последнее посещение было меньше месяца назад, то выводим сообщение об этом
        elif months == 0:
            print(f'{self.name} уже был(а) у ветеринара')
